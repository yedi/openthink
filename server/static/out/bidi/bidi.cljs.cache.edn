{:rename-macros {}, :renames {}, :use-macros {postwalk clojure.walk, match cljs.core.match.macros}, :excludes #{uuid}, :name bidi.bidi, :imports nil, :requires {walk clojure.walk, clojure.walk clojure.walk, url cemerick.url, cemerick.url cemerick.url, cljs.core.match cljs.core.match}, :uses {postwalk clojure.walk, url-decode cemerick.url, url-encode cemerick.url}, :defs {map->CompiledPrefix {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 358, :column 12, :end-line 358, :end-column 26, :internal-ctor true, :factory :map, :arglists (quote ([G__43823]))}, :name bidi.bidi/map->CompiledPrefix, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 26, :method-params ([G__43823]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 358, :end-line 358, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__43823]))}, uuid {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 15, :column 7, :end-line 15, :end-column 11, :arglists (quote ([s])), :doc "Function for creating a UUID of the appropriate type for the platform.\nNote that this function should _only_ be used in route patterns as, at least\nin the case of ClojureScript, it does not validate that the input string is\nactually a valid UUID (this is handled by the route matching logic)."}, :name bidi.bidi/uuid, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 11, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Function for creating a UUID of the appropriate type for the platform.\nNote that this function should _only_ be used in route patterns as, at least\nin the case of ClojureScript, it does not validate that the input string is\nactually a valid UUID (this is handled by the route matching logic)."}, ->TaggedMatch {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 345, :column 12, :end-line 345, :end-column 23, :internal-ctor true, :factory :positional, :arglists (quote ([name delegate]))}, :name bidi.bidi/->TaggedMatch, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 23, :method-params ([name delegate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 345, :end-line 345, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name delegate]))}, map->Alternates {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 337, :column 12, :end-line 337, :end-column 22, :internal-ctor true, :factory :map, :arglists (quote ([G__43807]))}, :name bidi.bidi/map->Alternates, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 22, :method-params ([G__43807]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 337, :end-line 337, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__43807]))}, match-pattern {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 173, :column 4, :end-line 173, :end-column 17, :protocol bidi.bidi/Pattern, :doc nil, :arglists (quote ([_ path]))}, :protocol bidi.bidi/Pattern, :name bidi.bidi/match-pattern, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 17, :method-params ([_ path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ path])), :doc nil}, Matched {:meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 176, :column 14, :end-line 176, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {resolve-handler [[_ m]], unresolve-handler [[_ m]]}}}, :protocol-symbol true, :name bidi.bidi/Matched, :file "../server/static/out/bidi/bidi.cljs", :end-column 21, :column 1, :line 176, :protocol-info {:methods {resolve-handler [[_ m]], unresolve-handler [[_ m]]}}, :info nil, :end-line 176, :impls #{cljs/core.LazySeq cljs/core.Keyword cljs/core.List cljs/core.PersistentArrayMap cljs/core.PersistentVector string bidi.bidi/TaggedMatch function cljs/core.Symbol}, :doc nil, :jsdoc ("@interface")}, match-pair {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 180, :column 7, :end-line 180, :end-column 17, :arglists (quote ([[pattern matched] env])), :doc "A pair contains a pattern to match (either fully or partially) and an\n  expression yielding a handler. The second parameter is a map\n  containing state, including the remaining path."}, :name bidi.bidi/match-pair, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 17, :method-params ([p__43766 env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[pattern matched] env])), :doc "A pair contains a pattern to match (either fully or partially) and an\n  expression yielding a handler. The second parameter is a map\n  containing state, including the remaining path."}, transform-param {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 73, :column 4, :end-line 73, :end-column 19, :protocol bidi.bidi/PatternSegment, :doc nil, :arglists (quote ([_]))}, :protocol bidi.bidi/PatternSegment, :name bidi.bidi/transform-param, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 19, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc nil}, TaggedMatch {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable bidi.bidi/Matched cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name bidi.bidi/TaggedMatch, :file "../server/static/out/bidi/bidi.cljs", :end-column 23, :type true, :column 12, :internal-ctor true, :line 345, :record true, :end-line 345, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, unmatch-segment {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 76, :column 4, :end-line 76, :end-column 19, :protocol bidi.bidi/PatternSegment, :doc nil, :arglists (quote ([_ params]))}, :protocol bidi.bidi/PatternSegment, :name bidi.bidi/unmatch-segment, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 19, :method-params ([_ params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 76, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ params])), :doc nil}, match-beginning {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 188, :column 7, :end-line 188, :end-column 22, :arglists (quote ([regex-pattern env])), :doc "Match the beginning of the :remainder value in m. If matched, update\n  the :remainder value in m with the path that remains after matching."}, :name bidi.bidi/match-beginning, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 22, :method-params ([regex-pattern env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 2, :fn-var true, :arglists (quote ([regex-pattern env])), :doc "Match the beginning of the :remainder value in m. If matched, update\n  the :remainder value in m with the path that remains after matching."}, CompiledPrefix {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted bidi.bidi/Pattern cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name bidi.bidi/CompiledPrefix, :file "../server/static/out/bidi/bidi.cljs", :end-column 26, :type true, :column 12, :internal-ctor true, :line 358, :record true, :end-line 358, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, resolve-handler {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 177, :column 4, :end-line 177, :end-column 19, :protocol bidi.bidi/Matched, :doc nil, :arglists (quote ([_ m]))}, :protocol bidi.bidi/Matched, :name bidi.bidi/resolve-handler, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 19, :method-params ([_ m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 177, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ m])), :doc nil}, unresolve-handler {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 178, :column 4, :end-line 178, :end-column 21, :protocol bidi.bidi/Matched, :doc nil, :arglists (quote ([_ m]))}, :protocol bidi.bidi/Matched, :name bidi.bidi/unresolve-handler, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 21, :method-params ([_ m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 178, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ m])), :doc nil}, map->TaggedMatch {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 345, :column 12, :end-line 345, :end-column 23, :internal-ctor true, :factory :map, :arglists (quote ([G__43815]))}, :name bidi.bidi/map->TaggedMatch, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 23, :method-params ([G__43815]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 345, :end-line 345, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__43815]))}, segment-regex-group {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 67, :column 4, :end-line 67, :end-column 23, :protocol bidi.bidi/PatternSegment, :doc nil, :arglists (quote ([_]))}, :protocol bidi.bidi/PatternSegment, :name bidi.bidi/segment-regex-group, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 23, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc nil}, encode-parameter {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 28, :column 4, :end-line 28, :end-column 20, :protocol bidi.bidi/ParameterEncoding, :doc nil, :arglists (quote ([_]))}, :protocol bidi.bidi/ParameterEncoding, :name bidi.bidi/encode-parameter, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 20, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc nil}, param-key {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 70, :column 4, :end-line 70, :end-column 13, :protocol bidi.bidi/PatternSegment, :doc nil, :arglists (quote ([_]))}, :protocol bidi.bidi/PatternSegment, :name bidi.bidi/param-key, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 13, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc nil}, matches? {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 79, :column 4, :end-line 79, :end-column 12, :protocol bidi.bidi/PatternSegment, :doc nil, :arglists (quote ([_ s]))}, :protocol bidi.bidi/PatternSegment, :name bidi.bidi/matches?, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 12, :method-params ([_ s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ s])), :doc nil}, compile-prefix {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 365, :column 7, :end-line 365, :end-column 21, :arglists (quote ([s])), :doc "Improve performance by composing the regex pattern ahead of time."}, :name bidi.bidi/compile-prefix, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 365, :end-line 365, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Improve performance by composing the regex pattern ahead of time."}, match-route {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 312, :column 7, :end-line 312, :end-column 18, :arglists (quote ([route path & {:as options}])), :doc "Given a route definition data structure and a path, return the\n  handler, if any, that matches the path.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(route path {:as options})], :arglists ([route path & {:as options}]), :arglists-meta (nil)}}, :name bidi.bidi/match-route, :variadic true, :file "../server/static/out/bidi/bidi.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(route path {:as options})], :arglists ([route path & {:as options}]), :arglists-meta (nil)}, :method-params [(route path {:as options})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 312, :end-line 312, :max-fixed-arity 2, :fn-var true, :arglists ([route path & {:as options}]), :doc "Given a route definition data structure and a path, return the\n  handler, if any, that matches the path."}, Alternates {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted bidi.bidi/Pattern cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name bidi.bidi/Alternates, :file "../server/static/out/bidi/bidi.cljs", :end-column 22, :type true, :column 12, :internal-ctor true, :line 337, :record true, :end-line 337, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, compile-route {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 371, :column 7, :end-line 371, :end-column 20, :arglists (quote ([route]))}, :name bidi.bidi/compile-route, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 20, :method-params ([route]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 371, :end-line 371, :max-fixed-arity 1, :fn-var true, :arglists (quote ([route]))}, ParameterEncoding {:meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 27, :column 14, :end-line 27, :end-column 31, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {encode-parameter [[_]]}}}, :protocol-symbol true, :name bidi.bidi/ParameterEncoding, :file "../server/static/out/bidi/bidi.cljs", :end-column 31, :column 1, :line 27, :protocol-info {:methods {encode-parameter [[_]]}}, :info nil, :end-line 27, :impls #{cljs/core.Keyword number cljs/core.UUID string}, :doc nil, :jsdoc ("@interface")}, path-for {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 319, :column 7, :end-line 319, :end-column 15, :arglists (quote ([route handler & {:as params}])), :doc "Given a route definition data structure, a handler and an option map, return a\n  path that would route to the handler. The map must contain the values to any\n  parameters required to create the path, and extra values are silently ignored.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(route handler {:as params})], :arglists ([route handler & {:as params}]), :arglists-meta (nil)}}, :name bidi.bidi/path-for, :variadic true, :file "../server/static/out/bidi/bidi.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(route handler {:as params})], :arglists ([route handler & {:as params}]), :arglists-meta (nil)}, :method-params [(route handler {:as params})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 2, :fn-var true, :arglists ([route handler & {:as params}]), :doc "Given a route definition data structure, a handler and an option map, return a\n  path that would route to the handler. The map must contain the values to any\n  parameters required to create the path, and extra values are silently ignored."}, Pattern {:meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 169, :column 14, :end-line 169, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {match-pattern [[_ path]], unmatch-pattern [[_ m]]}}}, :protocol-symbol true, :name bidi.bidi/Pattern, :file "../server/static/out/bidi/bidi.cljs", :end-column 21, :column 1, :line 169, :protocol-info {:methods {match-pattern [[_ path]], unmatch-pattern [[_ m]]}}, :info nil, :end-line 169, :impls #{js/RegExp boolean cljs/core.Keyword bidi.bidi/Alternates cljs/core.PersistentArrayMap cljs/core.PersistentVector string bidi.bidi/CompiledPrefix}, :doc nil, :jsdoc ("@interface")}, ->CompiledPrefix {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 358, :column 12, :end-line 358, :end-column 26, :internal-ctor true, :factory :positional, :arglists (quote ([prefix regex]))}, :name bidi.bidi/->CompiledPrefix, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 26, :method-params ([prefix regex]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 358, :end-line 358, :max-fixed-arity 2, :fn-var true, :arglists (quote ([prefix regex]))}, unmatch-pattern {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 174, :column 4, :end-line 174, :end-column 19, :protocol bidi.bidi/Pattern, :doc nil, :arglists (quote ([_ m]))}, :protocol bidi.bidi/Pattern, :name bidi.bidi/unmatch-pattern, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 19, :method-params ([_ m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 174, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ m])), :doc nil}, PatternSegment {:meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 64, :column 14, :end-line 64, :end-column 28, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {segment-regex-group [[_]], param-key [[_]], transform-param [[_]], unmatch-segment [[_ params]], matches? [[_ s]]}}}, :protocol-symbol true, :name bidi.bidi/PatternSegment, :file "../server/static/out/bidi/bidi.cljs", :end-column 28, :column 1, :line 64, :protocol-info {:methods {segment-regex-group [[_]], param-key [[_]], transform-param [[_]], unmatch-segment [[_ params]], matches? [[_ s]]}}, :info nil, :end-line 64, :impls #{js/RegExp cljs/core.Keyword cljs/core.PersistentVector string function}, :doc nil, :jsdoc ("@interface")}, unmatch-pair {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 264, :column 7, :end-line 264, :end-column 19, :arglists (quote ([v m]))}, :name bidi.bidi/unmatch-pair, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 19, :method-params ([v m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 264, :end-line 264, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v m]))}, ->Alternates {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 337, :column 12, :end-line 337, :end-column 22, :internal-ctor true, :factory :positional, :arglists (quote ([routes]))}, :name bidi.bidi/->Alternates, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 22, :method-params ([routes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 337, :end-line 337, :max-fixed-arity 1, :fn-var true, :arglists (quote ([routes]))}, succeed {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/bidi/bidi.cljs", :line 196, :column 7, :end-line 196, :end-column 14, :arglists (quote ([handler m]))}, :name bidi.bidi/succeed, :variadic false, :file "../server/static/out/bidi/bidi.cljs", :end-column 14, :method-params ([handler m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 2, :fn-var true, :arglists (quote ([handler m]))}}, :require-macros {cljs.core.match.macros cljs.core.match.macros}, :cljs.analyzer/constants {:seen #{:path :routes :delegate :else :name routes :params :route delegate :otherwise :prefix :route-params name prefix :regex :remainder :handler :request-method regex}, :order [:otherwise :remainder :handler :route-params :params :request-method :route :routes routes :name :delegate name delegate :prefix :regex :path prefix regex :else]}, :doc nil}