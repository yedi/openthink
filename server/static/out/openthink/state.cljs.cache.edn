{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name openthink.state, :imports nil, :requires {util openthink.utils, openthink.utils openthink.utils, t cognitect.transit, cognitect.transit cognitect.transit, om om.core, om.core om.core}, :uses nil, :defs {app-state {:name openthink.state/app-state, :file "/Users/yedianyansi/Documents/workshop/openthink/client/src/openthink/state.cljs", :line 6, :column 1, :end-line 6, :end-column 15, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/src/openthink/state.cljs", :line 6, :column 6, :end-line 6, :end-column 15}}, update-app-state! {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/src/openthink/state.cljs", :line 16, :column 7, :end-line 16, :end-column 24, :arglists (quote ([resp]))}, :name openthink.state/update-app-state!, :variadic false, :file "/Users/yedianyansi/Documents/workshop/openthink/client/src/openthink/state.cljs", :end-column 24, :method-params ([resp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([resp]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:comments :action_count :page :actions :rels :json :posts :sort-value}, :order [:json :sort-value :rels :posts :comments :page :action_count :actions]}, :doc nil}