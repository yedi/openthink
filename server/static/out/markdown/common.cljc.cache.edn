{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name markdown.common, :imports nil, :requires {string clojure.string, clojure.string clojure.string}, :uses nil, :defs {italics {:name markdown.common/italics, :file "../server/static/out/markdown/common.cljc", :line 140, :column 1, :end-line 140, :end-column 13, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 140, :column 6, :end-line 140, :end-column 13}}, separator {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 130, :column 7, :end-line 130, :end-column 16, :arglists (quote ([escape? text open close separator state]))}, :name markdown.common/separator, :variadic false, :file "../server/static/out/markdown/common.cljc", :end-column 16, :method-params ([escape? text open close separator state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 6, :fn-var true, :arglists (quote ([escape? text open close separator state]))}, make-heading {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 169, :column 7, :end-line 169, :end-column 19, :arglists (quote ([text heading-anchors]))}, :name markdown.common/make-heading, :variadic false, :file "../server/static/out/markdown/common.cljc", :end-column 19, :method-params ([text heading-anchors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text heading-anchors]))}, *substring* {:name markdown.common/*substring*, :file "../server/static/out/markdown/common.cljc", :line 4, :column 1, :end-line 4, :end-column 38, :dynamic true, :declared true, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 4, :column 27, :end-line 4, :end-column 38, :dynamic true, :declared true}}, dashes {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 176, :column 7, :end-line 176, :end-column 13, :arglists (quote ([text state]))}, :name markdown.common/dashes, :variadic false, :file "../server/static/out/markdown/common.cljc", :end-column 13, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, thaw-strings {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 36, :column 7, :end-line 36, :end-column 19, :arglists (quote ([text state])), :doc "Terminally encoded strings are ones that we've determined should no longer be processed or evaluated"}, :name markdown.common/thaw-strings, :variadic false, :file "../server/static/out/markdown/common.cljc", :end-column 19, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state])), :doc "Terminally encoded strings are ones that we've determined should no longer be processed or evaluated"}, escape-delimiter {:name markdown.common/escape-delimiter, :file "../server/static/out/markdown/common.cljc", :line 8, :column 1, :end-line 8, :end-column 22, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 8, :column 6, :end-line 8, :end-column 22}}, inhibit {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 146, :column 7, :end-line 146, :end-column 14, :arglists (quote ([text state]))}, :name markdown.common/inhibit, :variadic false, :file "../server/static/out/markdown/common.cljc", :end-column 14, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, heading-text {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 160, :column 7, :end-line 160, :end-column 19, :arglists (quote ([text]))}, :name markdown.common/heading-text, :variadic false, :file "../server/static/out/markdown/common.cljc", :end-column 19, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, *inhibit-separator* {:name markdown.common/*inhibit-separator*, :file "../server/static/out/markdown/common.cljc", :line 6, :column 1, :end-line 6, :end-column 35, :dynamic true, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 6, :column 16, :end-line 6, :end-column 35, :dynamic true}}, bold {:name markdown.common/bold, :file "../server/static/out/markdown/common.cljc", :line 136, :column 1, :end-line 136, :end-column 10, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 136, :column 6, :end-line 136, :end-column 10}}, freeze-string {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 13, :column 7, :end-line 13, :end-column 20, :arglists (quote ([& args])), :doc "Freezes an output string.  Converts to a placeholder token and puts that into the output.\n  Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\n  So that it can be unfrozen later.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name markdown.common/freeze-string, :variadic true, :file "../server/static/out/markdown/common.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Freezes an output string.  Converts to a placeholder token and puts that into the output.\n  Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\n  So that it can be unfrozen later."}, thaw-string {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 24, :column 7, :end-line 24, :end-column 18, :arglists (quote ([text state])), :doc "Recursively replaces the frozen strings in the output with the original text."}, :name markdown.common/thaw-string, :variadic false, :file "../server/static/out/markdown/common.cljc", :end-column 18, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state])), :doc "Recursively replaces the frozen strings in the output with the original text."}, make-separator {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 80, :column 7, :end-line 80, :end-column 21, :arglists (quote ([separator open close] [separator open close transformer])), :doc "Return a transformer to\n   - find all the chunks of the string delimited by the `separator',\n   - wrap the output with the `open' and `close' markers, and\n   - apply the `transformer' to the text inside the chunk.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([separator open close] [separator open close transformer]), :arglists ([separator open close] [separator open close transformer]), :arglists-meta (nil nil)}}, :name markdown.common/make-separator, :variadic false, :file "../server/static/out/markdown/common.cljc", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([separator open close] [separator open close transformer]), :arglists ([separator open close] [separator open close transformer]), :arglists-meta (nil nil)}, :method-params ([separator open close] [separator open close transformer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 4, :fn-var true, :arglists ([separator open close] [separator open close transformer]), :doc "Return a transformer to\n   - find all the chunks of the string delimited by the `separator',\n   - wrap the output with the `open' and `close' markers, and\n   - apply the `transformer' to the text inside the chunk."}, escape-code {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 43, :column 7, :end-line 43, :end-column 18, :arglists (quote ([s]))}, :name markdown.common/escape-code, :variadic false, :file "../server/static/out/markdown/common.cljc", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, gen-token {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 10, :column 7, :end-line 10, :end-column 16, :arglists (quote ([n]))}, :name markdown.common/gen-token, :variadic false, :file "../server/static/out/markdown/common.cljc", :end-column 16, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, strong {:name markdown.common/strong, :file "../server/static/out/markdown/common.cljc", :line 134, :column 1, :end-line 134, :end-column 12, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 134, :column 6, :end-line 134, :end-column 12}}, escape-code-transformer {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 125, :column 7, :end-line 125, :end-column 30, :arglists (quote ([text state]))}, :name markdown.common/escape-code-transformer, :variadic false, :file "../server/static/out/markdown/common.cljc", :end-column 30, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, em {:name markdown.common/em, :file "../server/static/out/markdown/common.cljc", :line 138, :column 1, :end-line 138, :end-column 8, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 138, :column 6, :end-line 138, :end-column 8}}, heading-level {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 165, :column 7, :end-line 165, :end-column 20, :arglists (quote ([text]))}, :name markdown.common/heading-level, :variadic false, :file "../server/static/out/markdown/common.cljc", :end-column 20, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, escaped-chars {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 59, :column 7, :end-line 59, :end-column 20, :arglists (quote ([text state]))}, :name markdown.common/escaped-chars, :variadic false, :file "../server/static/out/markdown/common.cljc", :end-column 20, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, inline-code {:name markdown.common/inline-code, :file "../server/static/out/markdown/common.cljc", :line 144, :column 1, :end-line 144, :end-column 17, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 144, :column 6, :end-line 144, :end-column 17}}, strikethrough {:name markdown.common/strikethrough, :file "../server/static/out/markdown/common.cljc", :line 142, :column 1, :end-line 142, :end-column 19, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 142, :column 6, :end-line 142, :end-column 19}}, escape-inhibit-separator {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/markdown/common.cljc", :line 152, :column 7, :end-line 152, :end-column 31, :arglists (quote ([text state]))}, :name markdown.common/escape-inhibit-separator, :variadic false, :file "../server/static/out/markdown/common.cljc", :end-column 31, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:codeblock :default :frozen-strings :found-token :code}, :order [:frozen-strings :code :codeblock :found-token :default]}, :doc nil}