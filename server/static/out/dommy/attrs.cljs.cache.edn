{:rename-macros {}, :renames {}, :use-macros {node dommy.macros}, :excludes #{}, :name dommy.attrs, :imports nil, :requires {str clojure.string, clojure.string clojure.string, dommy.utils dommy.utils}, :uses {as-str dommy.utils}, :defs {scroll-into-view {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 232, :column 7, :end-line 232, :end-column 23, :arglists (quote ([elem align-with-top?]))}, :name dommy.attrs/scroll-into-view, :variadic false, :file "../server/static/out/dommy/attrs.cljs", :end-column 23, :method-params ([elem align-with-top?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem align-with-top?]))}, toggle-attr! {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 191, :column 7, :end-line 191, :end-column 19, :arglists (quote ([elem k] [elem k add?])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([elem k] [elem k add?]), :arglists ([elem k] [elem k add?]), :arglists-meta (nil nil)}}, :name dommy.attrs/toggle-attr!, :variadic false, :file "../server/static/out/dommy/attrs.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([elem k] [elem k add?]), :arglists ([elem k] [elem k add?]), :arglists-meta (nil nil)}, :method-params ([elem k] [elem k add?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 3, :fn-var true, :arglists ([elem k] [elem k add?])}, show! {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 217, :column 7, :end-line 217, :end-column 12, :arglists (quote ([elem]))}, :name dommy.attrs/show!, :variadic false, :file "../server/static/out/dommy/attrs.cljs", :end-column 12, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem]))}, hide! {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 214, :column 7, :end-line 214, :end-column 12, :arglists (quote ([elem]))}, :name dommy.attrs/hide!, :variadic false, :file "../server/static/out/dommy/attrs.cljs", :end-column 12, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem]))}, set-style! {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 121, :column 7, :end-line 121, :end-column 17, :arglists (quote ([elem & kvs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem kvs)], :arglists ([elem & kvs]), :arglists-meta (nil)}}, :name dommy.attrs/set-style!, :variadic true, :file "../server/static/out/dommy/attrs.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem kvs)], :arglists ([elem & kvs]), :arglists-meta (nil)}, :method-params [(elem kvs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 1, :fn-var true, :arglists ([elem & kvs])}, has-class? {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 33, :column 16, :end-line 33, :end-column 26, :tag boolean, :arglists (quote ([elem class])), :doc "Does an HTML element have a class. Uses Element::classList if\n   available and otherwise does fast parse of className string"}, :name dommy.attrs/has-class?, :variadic false, :file "../server/static/out/dommy/attrs.cljs", :end-column 26, :method-params ([elem class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :ret-tag boolean, :end-line 33, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([elem class])), :doc "Does an HTML element have a class. Uses Element::classList if\n   available and otherwise does fast parse of className string"}, set-attr! {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 145, :column 7, :end-line 145, :end-column 16, :arglists (quote ([elem k] [elem k v] [elem k v & kvs])), :doc "Sets dom attributes on and returns `elem`.\n   Attributes without values will be set to \"true\":\n\n       (set-attr! elem :disabled)\n\n   With values, the function takes variadic kv pairs:\n\n       (set-attr! elem :id \"some-id\"\n                       :name \"some-name\")", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([elem k] [elem k v]), :arglists ([elem k] [elem k v] [elem k v & kvs]), :arglists-meta (nil nil nil)}}, :name dommy.attrs/set-attr!, :variadic true, :file "../server/static/out/dommy/attrs.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([elem k] [elem k v]), :arglists ([elem k] [elem k v] [elem k v & kvs]), :arglists-meta (nil nil nil)}, :method-params ([elem k] [elem k v]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 3, :fn-var true, :arglists ([elem k] [elem k v] [elem k v & kvs]), :doc "Sets dom attributes on and returns `elem`.\n   Attributes without values will be set to \"true\":\n\n       (set-attr! elem :disabled)\n\n   With values, the function takes variadic kv pairs:\n\n       (set-attr! elem :id \"some-id\"\n                       :name \"some-name\")"}, attr {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 187, :column 7, :end-line 187, :end-column 11, :arglists (quote ([elem k]))}, :name dommy.attrs/attr, :variadic false, :file "../server/static/out/dommy/attrs.cljs", :end-column 11, :method-params ([elem k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem k]))}, add-class! {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 45, :column 7, :end-line 45, :end-column 17, :arglists (quote ([elem classes] [elem classes & more-classes])), :doc "add class to element", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([elem classes]), :arglists ([elem classes] [elem classes & more-classes]), :arglists-meta (nil nil)}}, :name dommy.attrs/add-class!, :variadic true, :file "../server/static/out/dommy/attrs.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([elem classes]), :arglists ([elem classes] [elem classes & more-classes]), :arglists-meta (nil nil)}, :method-params ([elem classes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists ([elem classes] [elem classes & more-classes]), :doc "add class to element"}, class-match? {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 8, :column 17, :end-line 8, :end-column 29, :tag boolean, :private true, :arglists (quote ([class-name class idx])), :doc "does class-name string have class starting at index idx.\n   only will be used when Element::classList doesn't exist"}, :private true, :name dommy.attrs/class-match?, :variadic false, :file "../server/static/out/dommy/attrs.cljs", :end-column 29, :method-params ([class-name class idx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :ret-tag boolean, :end-line 8, :max-fixed-arity 3, :tag boolean, :fn-var true, :arglists (quote ([class-name class idx])), :doc "does class-name string have class starting at index idx.\n   only will be used when Element::classList doesn't exist"}, remove-class! {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 78, :column 7, :end-line 78, :end-column 20, :arglists (quote ([elem class] [elem class & classes])), :doc "remove class from and returns `elem`", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([elem class]), :arglists ([elem class] [elem class & classes]), :arglists-meta (nil nil)}}, :name dommy.attrs/remove-class!, :variadic true, :file "../server/static/out/dommy/attrs.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([elem class]), :arglists ([elem class] [elem class & classes]), :arglists-meta (nil nil)}, :method-params ([elem class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 2, :fn-var true, :arglists ([elem class] [elem class & classes]), :doc "remove class from and returns `elem`"}, set-px! {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 133, :column 7, :end-line 133, :end-column 14, :arglists (quote ([elem & kvs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem kvs)], :arglists ([elem & kvs]), :arglists-meta (nil)}}, :name dommy.attrs/set-px!, :variadic true, :file "../server/static/out/dommy/attrs.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem kvs)], :arglists ([elem & kvs]), :arglists-meta (nil)}, :method-params [(elem kvs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 1, :fn-var true, :arglists ([elem & kvs])}, class-index {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 22, :column 8, :end-line 22, :end-column 19, :private true, :arglists (quote ([class-name class])), :doc "Finds the index of class in a space-delimited class-name\n    only will be used when Element::classList doesn't exist"}, :private true, :name dommy.attrs/class-index, :variadic false, :file "../server/static/out/dommy/attrs.cljs", :end-column 19, :method-params ([class-name class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([class-name class])), :doc "Finds the index of class in a space-delimited class-name\n    only will be used when Element::classList doesn't exist"}, style-str {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 114, :column 8, :end-line 114, :end-column 17, :private true, :arglists (quote ([x]))}, :private true, :name dommy.attrs/style-str, :variadic false, :file "../server/static/out/dommy/attrs.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, px {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 140, :column 7, :end-line 140, :end-column 9, :arglists (quote ([elem k]))}, :name dommy.attrs/px, :variadic false, :file "../server/static/out/dommy/attrs.cljs", :end-column 9, :method-params ([elem k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem k]))}, remove-attr! {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 174, :column 7, :end-line 174, :end-column 19, :arglists (quote ([elem k] [elem k & ks])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([elem k]), :arglists ([elem k] [elem k & ks]), :arglists-meta (nil nil)}}, :name dommy.attrs/remove-attr!, :variadic true, :file "../server/static/out/dommy/attrs.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([elem k]), :arglists ([elem k] [elem k & ks]), :arglists-meta (nil nil)}, :method-params ([elem k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 174, :end-line 174, :max-fixed-arity 2, :fn-var true, :arglists ([elem k] [elem k & ks])}, remove-class-str {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 68, :column 8, :end-line 68, :end-column 24, :private true, :arglists (quote ([init-class-name class]))}, :private true, :name dommy.attrs/remove-class-str, :variadic false, :file "../server/static/out/dommy/attrs.cljs", :end-column 24, :method-params ([init-class-name class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 2, :fn-var true, :arglists (quote ([init-class-name class]))}, style {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 129, :column 7, :end-line 129, :end-column 12, :arglists (quote ([elem k]))}, :name dommy.attrs/style, :variadic false, :file "../server/static/out/dommy/attrs.cljs", :end-column 12, :method-params ([elem k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem k]))}, toggle-class! {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 95, :column 7, :end-line 95, :end-column 20, :arglists (quote ([elem class] [elem class add?])), :doc "(toggle-class! elem class) will add-class! if elem does not have class\n   and remove-class! otherwise.\n   (toggle-class! elem class add?) will add-class! if add? is truthy,\n   otherwise it will remove-class!", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([elem class] [elem class add?]), :arglists ([elem class] [elem class add?]), :arglists-meta (nil nil)}}, :name dommy.attrs/toggle-class!, :variadic false, :file "../server/static/out/dommy/attrs.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([elem class] [elem class add?]), :arglists ([elem class] [elem class add?]), :arglists-meta (nil nil)}, :method-params ([elem class] [elem class add?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 3, :fn-var true, :arglists ([elem class] [elem class add?]), :doc "(toggle-class! elem class) will add-class! if elem does not have class\n   and remove-class! otherwise.\n   (toggle-class! elem class add?) will add-class! if add? is truthy,\n   otherwise it will remove-class!"}, hidden? {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 200, :column 16, :end-line 200, :end-column 23, :tag boolean, :arglists (quote ([elem]))}, :name dommy.attrs/hidden?, :variadic false, :file "../server/static/out/dommy/attrs.cljs", :end-column 23, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :ret-tag boolean, :end-line 200, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([elem]))}, bounding-client-rect {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 220, :column 7, :end-line 220, :end-column 27, :arglists (quote ([elem])), :doc "Returns a map of the bounding client rect of `elem`\n   as a map with [:top :left :right :bottom :width :height]"}, :name dommy.attrs/bounding-client-rect, :variadic false, :file "../server/static/out/dommy/attrs.cljs", :end-column 27, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 220, :end-line 220, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem])), :doc "Returns a map of the bounding client rect of `elem`\n   as a map with [:top :left :right :bottom :width :height]"}, toggle! {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/dommy/attrs.cljs", :line 203, :column 7, :end-line 203, :end-column 14, :arglists (quote ([elem show?] [elem])), :doc "Display or hide the given `elem`. Takes an optional boolean `show?`\n   indicating whether to show or hide `elem`.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([elem show?] [elem]), :arglists ([elem show?] [elem]), :arglists-meta (nil nil)}}, :name dommy.attrs/toggle!, :variadic false, :file "../server/static/out/dommy/attrs.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([elem show?] [elem]), :arglists ([elem show?] [elem]), :arglists-meta (nil nil)}, :method-params ([elem show?] [elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 203, :end-line 203, :max-fixed-arity 2, :fn-var true, :arglists ([elem show?] [elem]), :doc "Display or hide the given `elem`. Takes an optional boolean `show?`\n   indicating whether to show or hide `elem`."}}, :require-macros {dommy.macros dommy.macros}, :cljs.analyzer/constants {:seen #{:bottom :top :width :style :class :right :classes :height :left}, :order [:style :class :classes :top :bottom :left :right :width :height]}, :doc nil}