{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name ajax.core, :imports nil, :requires {uri goog.Uri, t cognitect.transit, xhr goog.net.XhrIo, goog.net.XhrManager goog.net.XhrManager, goog.net.XhrIo goog.net.XhrIo, goog.Uri.QueryData goog.Uri.QueryData, goog.Uri goog.Uri, query-data goog.Uri.QueryData, cognitect.transit cognitect.transit, goog.net.EventType goog.net.EventType, events goog.events, goog.structs goog.structs, structs goog.structs, goog.json.Serializer goog.json.Serializer, xhrm goog.net.XhrManager, str clojure.string, clojure.string clojure.string, cljs.reader cljs.reader, goog.events goog.events, reader cljs.reader, goog.net.ErrorCode goog.net.ErrorCode}, :uses nil, :defs {edn-request-format {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 77, :column 7, :end-line 77, :end-column 25, :arglists (quote ([]))}, :name ajax.core/edn-request-format, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, PUT {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 347, :column 13, :end-line 347, :end-column 16, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/PUT, :variadic true, :file "../server/static/out/ajax/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 347, :end-line 347, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, detect-content-type {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 266, :column 17, :end-line 266, :end-column 36, :arglists (quote ([content-type [substring]] [content-type])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([content-type [substring]] [content-type]), :arglists ([content-type [substring]] [content-type]), :arglists-meta (nil nil)}}, :name ajax.core/detect-content-type, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 36, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([content-type [substring]] [content-type]), :arglists ([content-type [substring]] [content-type]), :arglists-meta (nil nil)}, :method-params ([content-type [substring]] [content-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 266, :end-line 266, :max-fixed-arity 2, :fn-var true, :arglists ([content-type [substring]] [content-type])}, POST {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 346, :column 13, :end-line 346, :end-column 17, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/POST, :variadic true, :file "../server/static/out/ajax/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 346, :end-line 346, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, AjaxImpl {:meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 17, :column 14, :end-line 17, :end-column 22, :doc "An abstraction for a javascript class that implements\n   Ajax calls.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-js-ajax-request [[this uri method body headers handler opts]]}}}, :protocol-symbol true, :name ajax.core/AjaxImpl, :file "../server/static/out/ajax/core.cljs", :end-column 22, :column 1, :line 17, :protocol-info {:methods {-js-ajax-request [[this uri method body headers handler opts]]}}, :info nil, :end-line 17, :impls #{nil goog/net.XhrManager}, :doc "An abstraction for a javascript class that implements\n   Ajax calls.", :jsdoc ("@interface")}, transit-request-format {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 87, :column 7, :end-line 87, :end-column 29, :arglists (quote ([] [{:keys [type writer], :as opts}])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [type writer], :as opts}]), :arglists ([] [{:keys [type writer], :as opts}]), :arglists-meta (nil nil)}}, :name ajax.core/transit-request-format, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [type writer], :as opts}]), :arglists ([] [{:keys [type writer], :as opts}]), :arglists-meta (nil nil)}, :method-params ([] [{:keys [type writer], :as opts}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists ([] [{:keys [type writer], :as opts}])}, transit-read {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 94, :column 17, :end-line 94, :end-column 29, :arglists (quote ([reader raw xhrio] [reader raw] [reader])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([reader raw xhrio] [reader raw] [reader]), :arglists ([reader raw xhrio] [reader raw] [reader]), :arglists-meta (nil nil nil)}}, :name ajax.core/transit-read, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([reader raw xhrio] [reader raw] [reader]), :arglists ([reader raw xhrio] [reader raw] [reader]), :arglists-meta (nil nil nil)}, :method-params ([reader raw xhrio] [reader raw] [reader]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 3, :fn-var true, :arglists ([reader raw xhrio] [reader raw] [reader])}, json-request-format {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 128, :column 7, :end-line 128, :end-column 26, :arglists (quote ([]))}, :name ajax.core/json-request-format, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, success? {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 64, :column 7, :end-line 64, :end-column 15, :arglists (quote ([status]))}, :name ajax.core/success?, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 15, :method-params ([status]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([status]))}, raw-response-format {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 121, :column 7, :end-line 121, :end-column 26, :arglists (quote ([] [opts])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}}, :name ajax.core/raw-response-format, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :method-params ([] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 1, :fn-var true, :arglists ([] [opts])}, read-text {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 114, :column 7, :end-line 114, :end-column 16, :arglists (quote ([xhrio]))}, :name ajax.core/read-text, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 16, :method-params ([xhrio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xhrio]))}, get-request-format {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 212, :column 7, :end-line 212, :end-column 25, :arglists (quote ([format]))}, :name ajax.core/get-request-format, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 25, :method-params ([format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format]))}, process-inputs {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 223, :column 7, :end-line 223, :end-column 21, :arglists (quote ([{:keys [uri method format params headers]}]))}, :name ajax.core/process-inputs, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 21, :method-params ([p__37974]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 223, :end-line 223, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [uri method format params headers]}]))}, get-default-format {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 270, :column 7, :end-line 270, :end-column 25, :arglists (quote ([xhrio {:keys [defaults], :as opts}]))}, :name ajax.core/get-default-format, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 25, :method-params ([xhrio p__38021]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xhrio {:keys [defaults], :as opts}]))}, -abort {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 26, :column 4, :end-line 26, :end-column 10, :protocol ajax.core/AjaxRequest, :doc "Aborts a running ajax request, if possible.", :arglists (quote ([this error-code]))}, :protocol ajax.core/AjaxRequest, :name ajax.core/-abort, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 10, :method-params ([this error-code]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this error-code])), :doc "Aborts a running ajax request, if possible."}, detect-response-format-read {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 278, :column 17, :end-line 278, :end-column 44, :arglists (quote ([opts xhrio] [opts])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([opts xhrio] [opts]), :arglists ([opts xhrio] [opts]), :arglists-meta (nil nil)}}, :name ajax.core/detect-response-format-read, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 44, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([opts xhrio] [opts]), :arglists ([opts xhrio] [opts]), :arglists-meta (nil nil)}, :method-params ([opts xhrio] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 278, :end-line 278, :max-fixed-arity 2, :fn-var true, :arglists ([opts xhrio] [opts])}, default-formats {:name ajax.core/default-formats, :file "../server/static/out/ajax/core.cljs", :line 258, :column 1, :end-line 258, :end-column 21, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 258, :column 6, :end-line 258, :end-column 21}}, interpret-response {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 184, :column 7, :end-line 184, :end-column 25, :arglists (quote ([{:keys [read], :as format} response]))}, :name ajax.core/interpret-response, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 25, :method-params ([p__37965 response]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [read], :as format} response]))}, get-response-format {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 153, :column 7, :end-line 153, :end-column 26, :arglists (quote ([format]))}, :name ajax.core/get-response-format, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 26, :method-params ([format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format]))}, easy-ajax-request {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 337, :column 7, :end-line 337, :end-column 24, :arglists (quote ([uri method opts]))}, :name ajax.core/easy-ajax-request, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 24, :method-params ([uri method opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 337, :end-line 337, :max-fixed-arity 3, :fn-var true, :arglists (quote ([uri method opts]))}, exception-response {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 159, :column 7, :end-line 159, :end-column 25, :arglists (quote ([e status {:keys [description]} xhrio]))}, :name ajax.core/exception-response, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 25, :method-params ([e status p__37953 xhrio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 4, :fn-var true, :arglists (quote ([e status {:keys [description]} xhrio]))}, submittable? {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 35, :column 7, :end-line 35, :end-column 19, :arglists (quote ([params]))}, :name ajax.core/submittable?, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 19, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params]))}, uri-with-params {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 207, :column 7, :end-line 207, :end-column 22, :arglists (quote ([uri params]))}, :name ajax.core/uri-with-params, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 22, :method-params ([uri params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 2, :fn-var true, :arglists (quote ([uri params]))}, transform-handler {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 314, :column 17, :end-line 314, :end-column 34, :arglists (quote ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :arglists ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :arglists-meta (nil nil)}}, :name ajax.core/transform-handler, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 34, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :arglists ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :arglists-meta (nil nil)}, :method-params ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 314, :end-line 314, :max-fixed-arity 2, :fn-var true, :arglists ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}])}, no-format {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 204, :column 7, :end-line 204, :end-column 16, :arglists (quote ([xhrio]))}, :name ajax.core/no-format, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 16, :method-params ([xhrio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 204, :end-line 204, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xhrio]))}, transform-opts {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 321, :column 7, :end-line 321, :end-column 21, :arglists (quote ([{:keys [method format response-format params], :as opts}]))}, :name ajax.core/transform-opts, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 21, :method-params ([p__38071]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 321, :end-line 321, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [method format response-format params], :as opts}]))}, AjaxRequest {:meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 24, :column 14, :end-line 24, :end-column 25, :doc "An abstraction for a running ajax request.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-abort [[this error-code]]}}}, :protocol-symbol true, :name ajax.core/AjaxRequest, :file "../server/static/out/ajax/core.cljs", :end-column 25, :column 1, :line 24, :protocol-info {:methods {-abort [[this error-code]]}}, :info nil, :end-line 24, :impls #{goog/net.XhrIo}, :doc "An abstraction for a running ajax request.", :jsdoc ("@interface")}, js-handler {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 237, :column 17, :end-line 237, :end-column 27, :arglists (quote ([response-format handler xhrio] [response-format handler] [response-format])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([response-format handler xhrio] [response-format handler] [response-format]), :arglists ([response-format handler xhrio] [response-format handler] [response-format]), :arglists-meta (nil nil nil)}}, :name ajax.core/js-handler, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([response-format handler xhrio] [response-format handler] [response-format]), :arglists ([response-format handler xhrio] [response-format handler] [response-format]), :arglists-meta (nil nil nil)}, :method-params ([response-format handler xhrio] [response-format handler] [response-format]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 3, :fn-var true, :arglists ([response-format handler xhrio] [response-format handler] [response-format])}, DELETE {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 348, :column 13, :end-line 348, :end-column 19, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/DELETE, :variadic true, :file "../server/static/out/ajax/core.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 348, :end-line 348, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, params-to-str {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 106, :column 7, :end-line 106, :end-column 20, :arglists (quote ([params]))}, :name ajax.core/params-to-str, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 20, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params]))}, transit-content-type {:name ajax.core/transit-content-type, :file "../server/static/out/ajax/core.cljs", :line 81, :column 1, :end-line 81, :end-column 26, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 81, :column 6, :end-line 81, :end-column 26}}, json-response-format {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 138, :column 7, :end-line 138, :end-column 27, :arglists (quote ([] [{:keys [prefix keywords? raw]}])), :doc "Returns a JSON response format.  Options include\n   :keywords? Returns the keys as keywords\n   :prefix A prefix that needs to be stripped off.  This is to\n   combat JSON hijacking.  If you're using JSON with GET request,\n   you should think about using this.\n   http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses\n   http://haacked.com/archive/2009/06/24/json-hijacking.aspx", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [prefix keywords? raw]}]), :arglists ([] [{:keys [prefix keywords? raw]}]), :arglists-meta (nil nil)}}, :name ajax.core/json-response-format, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [prefix keywords? raw]}]), :arglists ([] [{:keys [prefix keywords? raw]}]), :arglists-meta (nil nil)}, :method-params ([] [{:keys [prefix keywords? raw]}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 1, :fn-var true, :arglists ([] [{:keys [prefix keywords? raw]}]), :doc "Returns a JSON response format.  Options include\n   :keywords? Returns the keys as keywords\n   :prefix A prefix that needs to be stripped off.  This is to\n   combat JSON hijacking.  If you're using JSON with GET request,\n   you should think about using this.\n   http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses\n   http://haacked.com/archive/2009/06/24/json-hijacking.aspx"}, transit-write {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 83, :column 17, :end-line 83, :end-column 30, :arglists (quote ([writer params] [writer])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([writer params] [writer]), :arglists ([writer params] [writer]), :arglists-meta (nil nil)}}, :name ajax.core/transit-write, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 30, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([writer params] [writer]), :arglists ([writer params] [writer]), :arglists-meta (nil nil)}, :method-params ([writer params] [writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists ([writer params] [writer])}, abort {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 61, :column 7, :end-line 61, :end-column 12, :arglists (quote ([this]))}, :name ajax.core/abort, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, ajax-request {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 247, :column 7, :end-line 247, :end-column 19, :arglists (quote ([{:keys [uri method response-format manager], :as opts}]))}, :name ajax.core/ajax-request, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 19, :method-params ([p__37995]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 247, :end-line 247, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [uri method response-format manager], :as opts}]))}, read-edn {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 67, :column 7, :end-line 67, :end-column 15, :arglists (quote ([xhrio]))}, :name ajax.core/read-edn, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 15, :method-params ([xhrio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xhrio]))}, normalize-method {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 218, :column 7, :end-line 218, :end-column 23, :arglists (quote ([method]))}, :name ajax.core/normalize-method, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 23, :method-params ([method]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 218, :end-line 218, :max-fixed-arity 1, :fn-var true, :arglists (quote ([method]))}, url-request-format {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 117, :column 7, :end-line 117, :end-column 25, :arglists (quote ([]))}, :name ajax.core/url-request-format, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, keyword-response-format {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 301, :column 7, :end-line 301, :end-column 30, :arglists (quote ([format format-params]))}, :name ajax.core/keyword-response-format, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 30, :method-params ([format format-params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 301, :end-line 301, :max-fixed-arity 2, :fn-var true, :arglists (quote ([format format-params]))}, write-json {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 125, :column 7, :end-line 125, :end-column 17, :arglists (quote ([data]))}, :name ajax.core/write-json, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 17, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, fail {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 176, :column 7, :end-line 176, :end-column 11, :arglists (quote ([status status-text failure & params])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(status status-text failure params)], :arglists ([status status-text failure & params]), :arglists-meta (nil)}}, :name ajax.core/fail, :variadic true, :file "../server/static/out/ajax/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(status status-text failure params)], :arglists ([status status-text failure & params]), :arglists-meta (nil)}, :method-params [(status status-text failure params)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 3, :fn-var true, :arglists ([status status-text failure & params])}, edn-response-format {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 73, :column 7, :end-line 73, :end-column 26, :arglists (quote ([] [opts])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}}, :name ajax.core/edn-response-format, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :method-params ([] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists ([] [opts])}, GET {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 344, :column 13, :end-line 344, :end-column 16, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/GET, :variadic true, :file "../server/static/out/ajax/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 344, :end-line 344, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, HEAD {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 345, :column 13, :end-line 345, :end-column 17, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/HEAD, :variadic true, :file "../server/static/out/ajax/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 345, :end-line 345, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, DirectlySubmittable {:meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 29, :column 14, :end-line 29, :end-column 33, :doc "A marker interface for types that can be directly sent to XhrIo", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {}}}, :protocol-symbol true, :name ajax.core/DirectlySubmittable, :file "../server/static/out/ajax/core.cljs", :end-column 33, :column 1, :line 29, :protocol-info {:methods {}}, :info nil, :end-line 29, :impls #{js/FormData}, :doc "A marker interface for types that can be directly sent to XhrIo", :jsdoc ("@interface")}, TRACE {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 350, :column 13, :end-line 350, :end-column 18, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/TRACE, :variadic true, :file "../server/static/out/ajax/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 350, :end-line 350, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, transit-response-format {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 99, :column 7, :end-line 99, :end-column 30, :arglists (quote ([] [{:keys [type reader raw], :as opts}])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [type reader raw], :as opts}]), :arglists ([] [{:keys [type reader raw], :as opts}]), :arglists-meta (nil nil)}}, :name ajax.core/transit-response-format, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 30, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [type reader raw], :as opts}]), :arglists ([] [{:keys [type reader raw], :as opts}]), :arglists-meta (nil nil)}, :method-params ([] [{:keys [type reader raw], :as opts}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists ([] [{:keys [type reader raw], :as opts}])}, base-handler {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 242, :column 7, :end-line 242, :end-column 19, :arglists (quote ([response-format {:keys [handler]}]))}, :name ajax.core/base-handler, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 19, :method-params ([response-format p__37990]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 242, :end-line 242, :max-fixed-arity 2, :fn-var true, :arglists (quote ([response-format {:keys [handler]}]))}, detect-response-format {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 282, :column 7, :end-line 282, :end-column 29, :arglists (quote ([] [opts])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}}, :name ajax.core/detect-response-format, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :method-params ([] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 282, :end-line 282, :max-fixed-arity 1, :fn-var true, :arglists ([] [opts])}, json-read {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 132, :column 17, :end-line 132, :end-column 26, :arglists (quote ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :arglists ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :arglists-meta (nil nil nil nil)}}, :name ajax.core/json-read, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :arglists ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :arglists-meta (nil nil nil nil)}, :method-params ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 4, :fn-var true, :arglists ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix])}, keyword-request-format {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 288, :column 7, :end-line 288, :end-column 29, :arglists (quote ([format format-params]))}, :name ajax.core/keyword-request-format, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 29, :method-params ([format format-params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 288, :end-line 288, :max-fixed-arity 2, :fn-var true, :arglists (quote ([format format-params]))}, -js-ajax-request {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 20, :column 4, :end-line 20, :end-column 20, :protocol ajax.core/AjaxImpl, :doc "Makes an actual ajax request.  All parameters except opts\n     are in JS format.  Should return an AjaxRequest.", :arglists (quote ([this uri method body headers handler opts]))}, :protocol ajax.core/AjaxImpl, :name ajax.core/-js-ajax-request, :variadic false, :file "../server/static/out/ajax/core.cljs", :end-column 20, :method-params ([this uri method body headers handler opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 20, :max-fixed-arity 7, :fn-var true, :arglists (quote ([this uri method body headers handler opts])), :doc "Makes an actual ajax request.  All parameters except opts\n     are in JS format.  Should return an AjaxRequest."}, OPTIONS {:protocol-inline nil, :meta {:file "/Users/yedianyansi/Documents/workshop/openthink/client/../server/static/out/ajax/core.cljs", :line 349, :column 13, :end-line 349, :end-column 20, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/OPTIONS, :variadic true, :file "../server/static/out/ajax/core.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 349, :end-line 349, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}}, :require-macros {m ajax.macros, ajax.macros ajax.macros, p poppea, poppea poppea}, :cljs.analyzer/constants {:seen #{:response :description :finally :format :original-text :keywords? :read :else :failure :method :raw :response-format :status-text :aborted :params :type :defaults :parse-error :prefix :headers :error-handler :write :manager :priority :status :writer :id :reader :parse :content-type :max-retries :error :exception :uri :json :timeout :handler :keywordize-keys}, :order [:timeout :id :priority :max-retries :read :description :write :content-type :type :writer :json :reader :raw :keywordize-keys :prefix :keywords? :else :status :failure :response :error :status-text :parse :original-text :parse-error :exception :aborted :uri :method :format :params :headers :handler :response-format :manager :defaults :error-handler :finally]}, :doc nil}